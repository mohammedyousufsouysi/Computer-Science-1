{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNfykLM9O0ZspOLIQeJAc4d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ldVL4WiSFjm8","executionInfo":{"status":"ok","timestamp":1746538222391,"user_tz":-60,"elapsed":1506,"user":{"displayName":"Mohammed Swessi","userId":"02204474518473034616"}},"outputId":"78a60933-46fc-4b21-90d2-794645ce4703"},"outputs":[{"output_type":"stream","name":"stdout","text":["Full DataFrame:\n","      Name  Age           City  Salary\n","0     John   23       New York   50000\n","1    Alice   30    Los Angeles   70000\n","2      Bob   25        Chicago   45000\n","3  Charlie   35  San Francisco   80000\n","4    David   28       New York   55000\n","\n","Name and Salary columns:\n","      Name  Salary\n","0     John   50000\n","1    Alice   70000\n","2      Bob   45000\n","3  Charlie   80000\n","4    David   55000\n","\n","First 3 rows:\n","    Name  Age         City  Salary\n","0   John   23     New York   50000\n","1  Alice   30  Los Angeles   70000\n","2    Bob   25      Chicago   45000\n","\n","Average Salary: 60000.0\n","\n","People with Age >= 30:\n","      Name  Age           City  Salary\n","1    Alice   30    Los Angeles   70000\n","3  Charlie   35  San Francisco   80000\n","\n","Data sorted by Salary (descending):\n","      Name  Age           City  Salary\n","3  Charlie   35  San Francisco   80000\n","1    Alice   30    Los Angeles   70000\n","4    David   28       New York   55000\n","0     John   23       New York   50000\n","2      Bob   25        Chicago   45000\n","\n","Data sorted by City and then Age (both ascending):\n","      Name  Age           City  Salary\n","2      Bob   25        Chicago   45000\n","1    Alice   30    Los Angeles   70000\n","0     John   23       New York   50000\n","4    David   28       New York   55000\n","3  Charlie   35  San Francisco   80000\n","\n","DataFrame with missing values:\n","      Name  Age           City   Salary\n","0     John   23       New York  50000.0\n","1    Alice   30    Los Angeles  70000.0\n","2      Bob   25        Chicago      NaN\n","3  Charlie   35  San Francisco  80000.0\n","4    David   28           None  55000.0\n","\n","Cleaned data saved to 'Cleaned_data.csv'.\n","\n","Average Salary by City:\n","City\n","Chicago          63750.0\n","Los Angeles      70000.0\n","New York         50000.0\n","San Francisco    80000.0\n","Unknown          55000.0\n","Name: Salary, dtype: float64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-1-a49614d09b05>:62: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Salary'].fillna(new_average_salary, inplace=True)\n","<ipython-input-1-a49614d09b05>:65: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['City'].fillna(\"Unknown\", inplace=True)\n"]}],"source":["# Introduction to Pandas - Basics\n","\n","# 1. Import Pandas\n","import pandas as pd\n","\n","# 2. Create a DataFrame\n","data = {\n","    'Name': ['John', 'Alice', 'Bob', 'Charlie', 'David'],\n","    'Age': [23, 30, 25, 35, 28],\n","    'City': ['New York', 'Los Angeles', 'Chicago', 'San Francisco', 'New York'],\n","    'Salary': [50000, 70000, 45000, 80000, 55000]\n","}\n","\n","# Create the DataFrame\n","df = pd.DataFrame(data)\n","\n","# 3. Print the DataFrame\n","print(\"Full DataFrame:\")\n","print(df)\n","\n","# 4. Basic operations:\n","\n","# a. Display the \"Name\" and \"Salary\" columns only\n","print(\"\\nName and Salary columns:\")\n","print(df[['Name', 'Salary']])\n","\n","# b. Show the first 3 rows of the DataFrame\n","print(\"\\nFirst 3 rows:\")\n","print(df.head(3))\n","\n","# c. Find the average salary\n","average_salary = df['Salary'].mean()\n","print(\"\\nAverage Salary:\", average_salary)\n","\n","# d. Filter and display only the rows where Age is greater than or equal to 30\n","print(\"\\nPeople with Age >= 30:\")\n","print(df[df['Age'] >= 30])\n","\n","# 5. Sorting:\n","\n","# Sort the DataFrame by \"Salary\" in descending order\n","print(\"\\nData sorted by Salary (descending):\")\n","print(df.sort_values(by='Salary', ascending=False))\n","\n","# Sort the DataFrame by \"City\" and then by \"Age\" (both ascending)\n","print(\"\\nData sorted by City and then Age (both ascending):\")\n","print(df.sort_values(by=['City', 'Age']))\n","\n","# 6. Missing data:\n","\n","# Add missing values\n","df.loc[2, 'Salary'] = None  # Set Salary for Bob to None\n","df.loc[4, 'City'] = None    # Set City for David to None\n","\n","# a. Display the DataFrame with missing values\n","print(\"\\nDataFrame with missing values:\")\n","print(df)\n","\n","# b. Fill missing salary values with the average salary\n","# First, calculate the new average salary (excluding missing)\n","new_average_salary = df['Salary'].mean()\n","df['Salary'].fillna(new_average_salary, inplace=True)\n","\n","# c. Fill missing city values with \"Unknown\"\n","df['City'].fillna(\"Unknown\", inplace=True)\n","\n","# d. Drop any rows where there is a missing value (should be none after filling, but for practice)\n","df_cleaned = df.dropna()\n","\n","# 7. Save the data to a CSV file\n","df_cleaned.to_csv(\"Cleaned_data.csv\", index=False)\n","print(\"\\nCleaned data saved to 'Cleaned_data.csv'.\")\n","\n","# Bonus Challenge: Group by\n","\n","# Group the DataFrame by \"City\" and find the average salary for each city\n","print(\"\\nAverage Salary by City:\")\n","print(df_cleaned.groupby('City')['Salary'].mean())\n"]}]}